fullnameOverride: prometheus-stack
commonLabels: {}

grafana:
  enabled: true
  defaultDashboardsTimezone: Asia/Seoul
  ingress:
    enabled: true
    ingressClassName: alb
    annotations:
      alb.ingress.kubernetes.io/scheme: internet-facing 
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
      alb.ingress.kubernetes.io/success-codes: 200-399
      alb.ingress.kubernetes.io/group.name: "monitoring"
      alb.ingress.kubernetes.io/inbound-cidrs: "112.171.56.11/32"
    hosts:
    - grafana.juneman.click
    paths:
    - /*
  persistence:
    type: pvc
    enabled: true
    storageClassName: ebs
    accessModes:
    - ReadWriteOnce
    size: 10Gi

  #
  # 아래 설정 "true" 시 grafana에서 지정한 Dashboard / Datasource가 자동으로 추가됨
  # 
  sidecar:
    dashboards:
      enabled: false
    datasources:
      enabled: false
    

prometheus:
  #
  # agentMode는 Grafana Mimir 실습 때 사용              
  #
  agentMode: true
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    retention: 5d
    retentionSize: 10GiB
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ebs
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    #
    # remoteWrite는 Grafana Mimir 실습 때 사용              
    #
    remoteWrite:
      - url: http://mimir-nginx.monitoring.svc:80/api/v1/push

prometheusOperator:
  enabled: true
  tls:
    enabled: false

  admissionWebhooks:
    enabled: true
    patch:
      tolerations: []

defaultRules:
  create: true

kubernetesServiceMonitors:
  enabled: true

kubeApiServer:
  enabled: true

kubelet:
  enabled: true

kubeControllerManager:
  enabled: true

coreDns:
  enabled: true

kubeStateMetrics:
  enabled: true

nodeExporter:
  enabled: true

kubeEtcd:
  enabled: false

kubeScheduler:
  enabled: false

kubeProxy:
  enabled: false

thanosRuler:
  enabled: false

kubeDns:
  enabled: false

alertmanager:
  enabled: false